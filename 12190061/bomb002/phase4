gcit@gcit-OptiPlex-3040:~/Desktop/12190061/ITS304/Assignment_1_2/bomb002-20210919T152343Z-001/bomb002$ gdb bomb
(gdb) b phase_4
Breakpoint 1 at 0x40100e
(gdb) r
Starting program: /home/gcit/Desktop/12190061/ITS304/Assignment_1_2/bomb002-20210919T152343Z-001/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
1 2

Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi     //reads the user input format and it accepts two integers "%d, %d" & my inputs are: '1','2';
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax          //Compares 2 and the %eax where the value of %eax = 2;
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>  //If the values are not eqaul then the bomb will explode;
   0x0000000000401039 <+43>:	mov    (%rsp),%eax   //Here the (%rsp) contains the user input that i gave;
   0x000000000040103c <+46>:	sub    $0x2,%eax     //2 is subtracted from %eax and now the value of %eax=0;
   0x000000000040103f <+49>:	cmp    $0x2,%eax     //Now the comparison has been made between 2 and %eax where %eax=0;
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>  //Since 0 is less than 2, it will jump to line <+59> which means we can conclude that our second input is 2;
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi   //The value of (%rsp) is stored inside %esi;
   0x000000000040104c <+62>:	mov    $0x5,%edi     //5 is stored inside %edi;
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax   //My first user input has been made a comparison with %eax where the value of %eax=24 and my input was 1;
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>  //After the comparison, if the user input that i gave was equal to the value of %eax then our first term is being found; 
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.

gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.

(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
=> 0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.


(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
=> 0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.


(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
=> 0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.

(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
=> 0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.


(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
=> 0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.


(gdb) i r
rax            0x2                 2
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffdde0      140737488346592
rsi            0x0                 0
rdi            0x7fffffffd790      140737488344976
rbp            0x0                 0x0
rsp            0x7fffffffdde0      0x7fffffffdde0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x401034            0x401034 <phase_4+38>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0


(gdb) i r
rax            0x0                 0
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffdde0      140737488346592
rsi            0x0                 0
rdi            0x7fffffffd790      140737488344976
rbp            0x0                 0x0
rsp            0x7fffffffdde0      0x7fffffffdde0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x401049            0x401049 <phase_4+59>
eflags         0x293               [ CF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) x/d 0x7fffffffdde0
0x7fffffffdde0:	2


(gdb) p/d *(int*)($rsp+0x4)
$2 = 1
(gdb) i r
rax            0x18                24
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffdde0      140737488346592
rsi            0x2                 2
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fffffffdde0      0x7fffffffdde0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x401056            0x401056 <phase_4+72>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
