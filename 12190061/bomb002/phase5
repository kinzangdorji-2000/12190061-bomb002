
(gdb) b phase_5
Breakpoint 1 at 0x40107b
(gdb) r
Starting program: /home/gcit/Desktop/12190061/ITS304/Assignment_1_2/bomb002-20210919T152343Z-001/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
24 2
So you got that one.  Try this one.
1 2

Breakpoint 1, 0x000000000040107b in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi //reads the user input format and it accepts two integers "%d, %d" & my inputs are: '1' & '2';
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax     //Here a comparison has been made between $0x1 and %eax, where %eax = 2;
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>  //After the comparison, it was concluded that 2 is greater than 1 so it will not explode the bomb;
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax   //Here (%rsp) contains the user input that i gave and it is being moved inside %eax;
   0x00000000004010ae <+51>:	and    $0xf,%eax     //AND operation was performed and we get 1;
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)   //The value of %eax has been moved inside (%rsp);
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax     //Comparison has been made between $0xf which is 15 and %eax where value of %eax is 1;
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109> //Since the values of $0xf and %eax are not equal, therefore the bomb will not get explode;
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx  //$0x0 is moved inside %ecx where %ecx is 0;
   0x00000000004010be <+67>:	mov    $0x0,%edx  //$0x0 is moved inside %edx where %edx is 0;
   0x00000000004010c3 <+72>:	add    $0x1,%edx  //$0x1 is added to the value of %edx which will be 1 + 0 = 1;
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx  //The values of %eax and %ecx are added here;
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax  //Comparison has been made between $0xf which is 15 and %eax;
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>  //It will jump back to <+72> until the value of %eax is equal to 15, the loop will break out and then it will jump to next instruction. If not it will keep on returning back to line <+72>;
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)   //$0xf = 15 is moved to (%rsp);
   0x00000000004010dd <+98>:	cmp    $0xf,%edx  //$0xf was being compared with %edx where the value of $0xf is 15;
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109> //Here if it is not equal then the bomb will explode, which indicates that our first input is incorrect;
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx   //The second input that i gave has been compared with %ecx;
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114> //If my second user input matches then the bomb will not explode and move to next instruction;
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.


(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
=> 0x00000000004010b4 <+57>:	cmp    $0xf,%eax  //The value of $0xf is 15 so it is compared to with %eax which is 15;
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109> //Since the values of $0xf and %eax are equal, it will move to next instruction;
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx  //$0x0 is moved inside %ecx, where %ecx will be 0;
   0x00000000004010be <+67>:	mov    $0x0,%edx  //$0x0 is moved inside %edx, where %edx will be 0;
   0x00000000004010c3 <+72>:	add    $0x1,%edx  //$0x1 is added to the value of %edx which will be 1 + 0 = 1;
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)   //$0xf = 15 is moved inside %rsp and stored there;
   0x00000000004010dd <+98>:	cmp    $0xf,%edx     //$0xf = 15 is being compared with %edx, so until and unless if the value of %edx is 15 it will move to next instruction;
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109> //We can get the value of %edx by changing the first input and the range of first input should be less than 15;
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx         //The second input is being compared to with the value of %ecx which is 115 and if the second user input matches then the bomb will not get explode;
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.


(gdb) i r
rax            0x5                 5 
rbx            0x7fffffffe4b8      140737488348344
rcx            0x0                 0
rdx            0x7fffffffe3a4      140737488348068


(gdb) i r
rax            0xf                 15
rbx            0x7fffffffe4b8      140737488348344
rcx            0x73                115 
rdx            0xf                 15


//Therefore the correct user inputs are '5' & '115', so the phase was defused.
So you got that one.  Try this one.
5 115
Good work!  On to the next...


